services:
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # для AMQP
      - "15672:15672" # для Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    environment:
      # Логин и пароль по умолчанию, можно изменить
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tg_whisper_network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tg_whisper_network

  telegram_bot_backend:
    build:
      context: ./telegram-bot-backend
      dockerfile: Dockerfile
    container_name: telegram_bot_backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      USE_STUB_BROKER: "false"
      TG_BOT_BACKEND_USE_POLLING: "true"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - tg_whisper_network
    # Если бот работает через вебхуки, нужно пробросить порт:
    # ports:
    #   - "8080:8080"

  whisper_consumer_worker:
    build:
      context: .
      dockerfile: ./whisper-consumer/Dockerfile
    container_name: whisper_consumer_worker
    restart: unless-stopped
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      USE_STUB_BROKER: "false"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - tg_whisper_network

  telegram_bot_consumer:
    build:
      context: ./telegram-bot-consumer
      dockerfile: Dockerfile
    container_name: telegram_bot_consumer
    restart: unless-stopped
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      USE_STUB_BROKER: "false"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - tg_whisper_network

volumes:
  rabbitmq_data:
  redis_data:

networks:
  tg_whisper_network:
    driver: bridge 